
/* Interface from hardware to main loop. Raw ADC values from the pins, with
 * values in volts */
struct AdcRawUpdate {
  u32 time
  f32 inputs[16]
}

struct AnotherUpdate {
  u32 time              /* Encode a U32 */
  u16 count             /* Encode a U16, still takes 4 bytes */
  f32 *inputs[count<16] /* Encode a float array, variable sized serialization up
                           16 entries */
  u16 bleh[count<16]    /* Encode a U16 array, fixed size serialization, 16
                           entries */
  u16 fixed[16]         /* Encode a fixed size U16 array, size == capacity */
  pack {
    u8 one              /* Encode a U8, start is still 4 byte aligned */
    u8 two              /* Encode a U8 immediately after `one` */
    u16 three           /* Encode a U16 immediately after two */
    u8 four             /* Encode a U8 immediately after three
  }                     /* Still padded to four bytes */
}

/* Interface from hardware to main loop. Raw trigger input event */
struct TriggerRawUpdate {
  u32 time
  u8 trigger
}

/* Output of decoder */
struct DecoderUpdate {
  u32 time
  u32 angle
  f32 average_rpm
  f32 instant_rpm
}

struct CalculatedValues {
  f32 timing_advance
  u32 fuel_us
  u32 dwell_us

  f32 ve

  bool is_rpm_limit_cut
  bool is_boost_cut
  bool is_fuel_overduty_cut
}

struct ScheduleUpdate {
  struct {
    bool is_scheduled
    u32 start
    u32 end
  } outputs[16]
}


struct EngineUpdate {
  u32 time

  /* TBD Sensors */

  CalculatedValues calculated_values
  ScheduleUpdate schedule
}

struct ConsoleMessage {
  u32 time
  oneof message {
    AdcRawUpdate
    TriggerRawUpdate
    DecoderUpdate
    CalculatedValuesUpdate
    EngineUpdate
  }
}

struct ConsoleMessage {
  uint32_t time;
  enum {
    ConsoleMessage_message_AdcRawUpdate = 1;
    ConsoleMessage_message_TriggerRawUpdate;
    ConsoleMessage_message_DecoderUpdate;
    ConsoleMessage_message_CalculatedValuesUpdate;
    ConsoleMessage_message_EngineUpdate;
  } message_type;
  union {
    struct ScheduleUpdate
